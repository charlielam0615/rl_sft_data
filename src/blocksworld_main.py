import openai
import re
import json
import datetime

api_key = 'sk-rMwveLlHvxcADL8vcekIG49bxKnzUZcAhdc7kkJfjpNDYw2L'
base_url = 'https://yibuapi.com/v1'

output_file = "/data/rl_sft_data/PlanBench/output/"
system_prompt = """Meta-Cognitive Action Set (M)
We define a set of meta-cognitive actions M, divided into three subsets: Planning (P), Implementation (I), and Review (R).
- Planning $$P \\subset M$$
  - Forward Subgoaling: Breaking down the current goal into forward-looking intermediate subgoals.
  - Backward Subgoaling: Defining necessary intermediate subgoals by working backward from the current goal.
  - Adjust Subgoals: Adjusting or changing previously set intermediate subgoals.
  - Backtrack: Returning to an earlier state.
- Implementation $$I \\subset M$$
  - Reach Goal: Identifying the goal of this step, and applying reasoning or using tools to achieve it.
  - Validation: Checking the current path's validity.
- Review $$R \\subset M$$
  - Track Goals: Organize and review the hierarchy of goals generated by previous subgoaling methods, highlighting the current one.
  - Recall Info: Retrieve past information relevant to the current step.

I want you to solve problems by selecting one action per step from the meta-cognitive action list. Your response must adhere to the following format: enclose all planning-related content within [PLANNING] and [/PLANNING] tags, all implementation-related content within [IMP] and [/IMP] tags, and all review-related content within [REVIEW] and [/REVIEW] tags. The details of the requirement will be given below.
- The [PLANNING], [IMP] and [REVIEW] blocks
The meta-cognitive action list divides actions into three categories: "planning", "implementation" and "Review". If the selected action is from the "planning" category, include all content for that step in the [PLANNING] block. If the action is from the "implementation" category, place the action name and action meta-data (defined below) and in the [PLANNING] block, and the rest of the content is deemed as implementation details and should be placed in the [IMP] block. If the action is from the "review" category, place the action name in the [PLANNING] block, and the rest of the content is deemed as reviewed details, and should be placed in the [REVIEW] block.

- Additional remarks on the [PLANNING] block
For actions from the "planning" category, put all the generated content of the action in the [PLANNING] block.
For actions from the "implementation" category, put the action name and implementation-action meta-data in the [PLANNING] block. The implementation-action meta-data includes details about the current goal, and a concise description about how to achieve it. Present the meta-data in clear, natural language.
For actions from the "review" category, when the action is "recall info" include the action name and its meta-data in the [PLANNING] block. The meta-data should concisely describe the core content serving as the foundation for the information retrieval process, with retrieved information being relevant to this content. When is the action is not "recall info", just put the action name in the [PLANNING] block.

- Additional remarks on the [REVIEW] block
For actions belong to the review category, we provide detailed instructions below:
Track Goals: Maintain a goal-management system and list all goals in a nested format by integrating information from the recent [PLANNING] block. The aim of this action is to provide an overall as well as focused context to future [IMP] block. You should also state the current goal. Ensure the goals reflect the most recent updates, particularly if they have just been modified by actions from the "planning" category.
Recall Info: Identify the current goal, go through all previous contents, and extract information related to the current goal. Your summarized information should be concise, such that it should serve as pointers to previous related materials.

Start your solution by restating the problem clearly. Then, for each step, include the following blocks based on the action's category:

Case 1: Planning action — Include only the [PLANNING] block.
Case 2: Implementation action — Include the [PLANNING] block followed by the [IMP] block.
Case 3: Review action — Include the [PLANNING] block followed by the [REVIEW] block.

Append which category the selected action belongs to after the action name in the [PLANNING] block.
===========
Solve the user's problems by following the previous requirements.
"""
question = """
The Blocks World task is a classic planning problem. 
I want you to simulate a Blocksworld planning case and then create a Blocksworld plan.
Here are its main features:
*Basic Concept*
It consists of a set of blocks, a table, and a robot hand. The blocks can be on top of other blocks or on the table. The goal is to build one or more vertical stacks of blocks.
Operations
Pickup: When a block is alone on the table, the robot hand can pick it up.
Putdown: If a block is in the robot hand, it can be placed on the table.
Stack: If a block is in the robot hand and another block has a clear top, the robot hand can place the block on top of the other block.
Unstack: If a block is on top of another block, the robot hand can pick it up"""


def get_openai_response(model_name, question, api_key, base_url):
    try:
        client = openai.OpenAI(api_key=api_key, base_url=base_url)
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question},
            ],
            temperature=0.7,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"请求失败：{str(e)}"


if __name__ == "__main__":
    case_number = 4
    #model_name = "gpt-4o-mini"
    model_name = "grok-3"

    base_filename = f"blocks_world_{model_name}"



    for i in range(case_number):
        print(f"Case  {i+1}")
        response = get_openai_response(model_name, question, api_key, base_url)
        print(response)

        filename = base_filename + f"_{i}.txt"
        # 将 response 追加写入 txt 文件
        with open(output_file + filename, 'w+', encoding='utf-8') as f:
            f.write(response)


